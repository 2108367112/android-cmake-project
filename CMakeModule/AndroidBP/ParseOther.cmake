
function(doHeaderOther line header_name out)
    if("${line}" MATCHES "^export_include_dirs:.*")
        string(REPLACE "export_include_dirs:" "" line "${line}")
        string(STRIP ${line} line)
        BracketsToList("${line}" export_include_dirs)
        SET(${header_name}_export_include_dirs "${export_include_dirs}" PARENT_SCOPE)
        SET("${out}" "${header_name}_export_include_dirs" PARENT_SCOPE)
    endif()
endfunction()

function(doVariableOther line out)
    string(LENGTH "${line}" doVariable_length)
    string(FIND "${line}" "=" name_num)
    string(SUBSTRING ${line} "0" "${name_num}" doVariable_name)
    string(STRIP ${doVariable_name} doVariable_name)
    math(EXPR name_num "${name_num} + 1")
    string(SUBSTRING ${line} "${name_num}" "${doVariable_length}" doVariable_value)
    BracketsToList("${doVariable_value}" doVariable_value)
    SET("${out}" "${doVariable_name}" PARENT_SCOPE)
    SET("${doVariable_name}" "${doVariable_value}" PARENT_SCOPE)
endfunction()

function(doDefaultOther line default_name out)

    if("${line}" MATCHES "^cflags: .*")
        string(REPLACE "cflags:" "" line "${line}")
        string(STRIP ${line} line)
        BracketsToList("${line}" c_flags)
        SET(${default_name}_c_flags "${c_flags}" PARENT_SCOPE)
        SET("${out}" "${default_name}_c_flags" PARENT_SCOPE)
    elseif("${line}" MATCHES "^cppflags: .*")
        string(REPLACE "cppflags:" "" line "${line}")
        string(STRIP ${line} line)
        BracketsToList("${line}" cppflags)
        SET(${default_name}_cpp_flags "${cppflags}" PARENT_SCOPE)
        SET("${out}" "${default_name}_cpp_flags" PARENT_SCOPE)
    elseif("${line}" MATCHES "^static_libs: .*")
        string(REPLACE "static_libs:" "" line "${line}")
        string(STRIP ${line} line)
        BracketsToList("${line}" static_libs)
        SET(${default_name}_static_libs "${static_libs}" PARENT_SCOPE)
        SET("${out}" "${default_name}_static_libs" PARENT_SCOPE)
    elseif("${line}" MATCHES "^shared_libs: .*")
        string(REPLACE "shared_libs:" "" line "${line}")
        string(STRIP ${line} line)
        BracketsToList("${line}" shared_libs)
        SET(${default_name}_shared_libs "${shared_libs}" PARENT_SCOPE)
        SET("${out}" "${default_name}_shared_libs" PARENT_SCOPE)
    elseif("${line}" MATCHES "^srcs: .*")
        string(REPLACE "srcs:" "" line "${line}")
        string(STRIP ${line} line)
        BracketsToList("${line}" srcs)
        SET(${default_name}_srcs "${srcs}" PARENT_SCOPE)
        SET("${out}" "${default_name}_srcs" PARENT_SCOPE)
    elseif("${line}" MATCHES "^include_dirs: .*")
        string(REPLACE "include_dirs:" "" line "${line}")
        string(STRIP ${line} line)
        BracketsToList("${line}" include_dirs)
        SET(${default_name}_include_dirs "${include_dirs}" PARENT_SCOPE)
        SET("${out}" "${default_name}_include_dirs" PARENT_SCOPE)
    elseif("${line}" MATCHES "^export_include_dirs:.*")
        string(REPLACE "export_include_dirs:" "" line "${line}")
        string(STRIP ${line} line)
        BracketsToList("${line}" export_include_dirs)
        SET(${default_name}_export_include_dirs "${export_include_dirs}" PARENT_SCOPE)
        SET("${out}" "${default_name}_export_include_dirs" PARENT_SCOPE)
    endif()
endfunction()

function(parseOtherBP parseOtherBP_path)
    message("OtherBP:${parseOtherBP_path}")
    execute_process(COMMAND ${PROJECT_DIR}/Cmake/AndroidBP/rm_comment ${parseOtherBP_path} OUTPUT_VARIABLE parseOtherBP_MyFile)
    STRING(REGEX REPLACE ";" "\\\\;" parseOtherBP_MyFile "${parseOtherBP_MyFile}")
    STRING(REGEX REPLACE "\n" ";" parseOtherBP_MyFile "${parseOtherBP_MyFile}")

    SET(parseOtherBP_Brackets_num 0)
    SET(parseOtherBP_bpType "${ANDROID_BP_NONE}")
    # SET(LOCAL_MODULE "")
    SET(parseOtherBP_default_name "")
    SET(parseOtherBP_header_name "")
    SET(parseOtherBP_module_type "")

    SET(parseOtherBP_blockBrackets "0")
    SET(parseOtherBP_isBlock OFF)

    foreach(parseOtherBP_line ${parseOtherBP_MyFile})
        string(STRIP "${parseOtherBP_line}" parseOtherBP_line)
        if("${parseOtherBP_line}" MATCHES "^//+")
            continue()
        endif()
        string(REPLACE ";" "" parseOtherBP_line "${parseOtherBP_line}")
        string(REGEX REPLACE "(\t)+" " " parseOtherBP_line "${parseOtherBP_line}")
        string(REGEX REPLACE " +" " " parseOtherBP_line "${parseOtherBP_line}")

        if("${parseOtherBP_line}" MATCHES ".*{$")
            math(EXPR parseOtherBP_Brackets_num "${parseOtherBP_Brackets_num} + 1")
            if("${parseOtherBP_Brackets_num}" EQUAL "1" )
                if("${parseOtherBP_line}" MATCHES ".*defaults.*")
                    SET(parseOtherBP_bpType "${ANDROID_BP_DEFAULT}")
                elseif("${parseOtherBP_line}" MATCHES ".*headers.*")
                    SET(parseOtherBP_bpType "${ANDROID_BP_HEADERS}")
                endif()
            elseif("${parseOtherBP_Brackets_num}" GREATER "1" )
                if("${parseOtherBP_line}" MATCHES ".*host.*" OR "${parseOtherBP_line}" MATCHES ".*windows.*" OR "${parseOtherBP_line}" MATCHES ".*x86.*" OR "${parseOtherBP_line}" MATCHES ".*x86_64.*")
                    SET(parseOtherBP_blockBrackets "${parseOtherBP_Brackets_num}")
                    SET(parseOtherBP_isBlock ON)
                endif()
            endif()
        elseif("${parseOtherBP_line}" MATCHES "^}.*")
            math(EXPR parseOtherBP_Brackets_num "${parseOtherBP_Brackets_num} - 1")
            if("${parseOtherBP_Brackets_num}" EQUAL "0" )
                SET(parseOtherBP_bpType "${ANDROID_BP_NONE}")
            else()
                if(parseOtherBP_isBlock)
                    if("${parseOtherBP_Brackets_num}" LESS "${parseOtherBP_blockBrackets}" )
                        SET(parseOtherBP_isBlock OFF)
                        SET(parseOtherBP_blockBrackets "0")
                    endif()
                endif()
            endif()
        elseif("${parseOtherBP_line}" MATCHES "^name: .*")
            string(REPLACE "name:" "" parseOtherBP_name "${parseOtherBP_line}")
            string(STRIP ${parseOtherBP_name} parseOtherBP_name)
            string(REPLACE "\"" "" parseOtherBP_name "${parseOtherBP_name}")
            string(REPLACE "," "" parseOtherBP_name "${parseOtherBP_name}")
            if("${parseOtherBP_bpType}" STREQUAL "${ANDROID_BP_DEFAULT}")
                SET(parseOtherBP_default_name "${parseOtherBP_name}")
            elseif("${parseOtherBP_bpType}" STREQUAL "${ANDROID_BP_HEADERS}")
                SET(parseOtherBP_header_name "${parseOtherBP_name}")
            endif()
        elseif(NOT parseOtherBP_isBlock)
            if("${parseOtherBP_bpType}" STREQUAL "${ANDROID_BP_DEFAULT}")
                doDefaultOther("${parseOtherBP_line}" "${parseOtherBP_default_name}" name)
                SET("${name}" "${${name}}" PARENT_SCOPE)
            elseif("${parseOtherBP_bpType}" STREQUAL "${ANDROID_BP_HEADERS}")
                doHeaderOther("${parseOtherBP_line}" "${parseOtherBP_default_name}" name)
                SET("${name}" "${${name}}" PARENT_SCOPE)
            elseif("${parseOtherBP_line}" MATCHES ".*=.*")
                doVariableOther("${parseOtherBP_line}" name)
                SET("${name}" "${${name}}" PARENT_SCOPE)
            endif()
        endif()
    endforeach()
endfunction()